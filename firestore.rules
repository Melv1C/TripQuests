rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function isTripMember(tripId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/trips/$(tripId)/participants/$(request.auth.uid));
    }
    
    // Helper function to check if user is trip organizer
    function isAdmin(tripId) {
      let tripParticipantRef = /databases/$(database)/documents/trips/$(tripId)/participants/$(request.auth.uid);
      return exists(tripParticipantRef) && get(tripParticipantRef).data.role == 'organizer';
    }
    
    function unchanged(field) {
      return request.resource.data[field] == resource.data[field];
    }
    
    function hasValidFields(requiredFields) {
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    // For the special case of pseudo update, check if the only thing we're changing is creatorPseudo
    function isOnlyUpdatingCreatorPseudo() {
      // When using updateDoc with one field, we need to check if:
      // 1. creatorPseudo is present in the request
      // 2. Either it's the only field in the request OR creatorPseudo is the only field changing
      return request.resource.data.keys().hasAny(['creatorPseudo']) && 
             (request.resource.data.keys().size() == 1 || 
              request.resource.data.diff(resource.data).affectedKeys().hasOnly(['creatorPseudo']));
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) && 
                     hasValidFields(['pseudo', 'email', 'avatarUrl', 'createdAt', 'participatingTripIds']);
      allow update: if isOwner(userId) && 
                     (!request.resource.data.diff(resource.data).affectedKeys()
                       .hasAny(['email', 'createdAt']) || 
                      (request.resource.data.keys().hasAny(['email']) && 
                       unchanged('email')) ||
                      (request.resource.data.keys().hasAny(['createdAt']) && 
                       unchanged('createdAt')));
      allow delete: if false; // Don't allow users to be deleted
    }
    
    // Trips collection
    match /trips/{tripId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
                     request.resource.data.creatorId == request.auth.uid &&
                     hasValidFields(['name', 'description', 'location', 'startDate', 'endDate', 'creatorId', 'inviteCode', 'createdAt']);
      allow update: if isSignedIn() && (isAdmin(tripId) || 
                    (resource.data.creatorId == request.auth.uid));
      allow delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
      
      // Trip participants subcollection
      match /participants/{participantId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() &&
                        (
                          participantId == request.auth.uid && 
                          request.resource.data.keys().hasOnly(['pseudo', 'avatarUrl', 'role', 'joinedAt']) &&
                          request.resource.data.role in ['organizer', 'participant'] &&
                          userExists(request.auth.uid)
                        );
        allow update: if 
          // Case 1: Self-update for basic profile info
          (isSignedIn() && request.auth.uid == participantId) ||
          // Case 2: Organizer updating role (existing logic)
          (isAdmin(tripId)) || 
          // Case 3: Organizer adjusting points (new logic)
          (isAdmin(tripId) && 
           request.resource.data.diff(resource.data).affectedKeys()
             .hasOnly(['manualPointsAdjustment', 'lastAdjustmentReason']));
        allow delete: if isSignedIn() && participantId == request.auth.uid;
      }
    }
    
    // Quests collection
    match /quests/{questId} {
      allow read: if isSignedIn() && isTripMember(resource.data.tripId);
      allow create: if isSignedIn() && 
                     isTripMember(request.resource.data.tripId) &&
                     hasValidFields(['title', 'description', 'tripId', 'creatorId', 'creatorPseudo', 'questType', 
                                     'points', 'deadline', 'imageUrl', 'createdAt', 'isActive']);
      
      // Simplified quest update rules:
      // Case 1: Normal case - you're a trip member and either admin or creator
      // Case 2: Special case - you're the quest creator and only updating your creatorPseudo
      allow update: if isSignedIn() && 
                     (
                       (isTripMember(resource.data.tripId) && 
                        (isAdmin(resource.data.tripId) || resource.data.creatorId == request.auth.uid))
                       || 
                       (resource.data.creatorId == request.auth.uid && isOnlyUpdatingCreatorPseudo())
                     );
      
      allow delete: if isSignedIn() && 
                     isTripMember(resource.data.tripId) &&
                     (isAdmin(resource.data.tripId) || resource.data.creatorId == request.auth.uid);
    }
    
    // Submissions collection
    match /submissions/{submissionId} {
      allow read: if isSignedIn() && isTripMember(resource.data.tripId);
      allow create: if isSignedIn() && 
                     isTripMember(request.resource.data.tripId) &&
                     request.resource.data.submitterId == request.auth.uid &&
                     hasValidFields(['questId', 'tripId', 'submitterId', 'submitterPseudo', 'evidence', 
                                     'status', 'submittedAt', 'pointsAwarded', 'reviewedAt', 'reviewerId']) &&
                     request.resource.data.status == 'pending' &&
                     request.resource.data.pointsAwarded == 0 &&
                     request.resource.data.reviewedAt == null &&
                     request.resource.data.reviewerId == null;
      allow update: if isSignedIn() && 
                     isTripMember(resource.data.tripId) &&
                     (
                       // Case 1: User is updating their own submission (but not the review fields)
                       (resource.data.submitterId == request.auth.uid && 
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'reviewerId', 'reviewedAt', 'pointsAwarded']))
                       ||
                       // Case 2: User is reviewing someone else's submission (Single Approval Logic)
                       (resource.data.submitterId != request.auth.uid && 
                        resource.data.status == 'pending' &&
                        request.resource.data.reviewerId == request.auth.uid &&
                        request.resource.data.status in ['approved', 'rejected'] &&
                        (request.resource.data.status == 'rejected' ? request.resource.data.pointsAwarded == 0 : true) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasAll(['status', 'reviewerId', 'reviewedAt', 'pointsAwarded']))
                       ||
                       // Case 3: User is an admin
                       isAdmin(resource.data.tripId)
                     );
      allow delete: if isSignedIn() && 
                     isTripMember(resource.data.tripId) &&
                     (resource.data.submitterId == request.auth.uid || 
                      isAdmin(resource.data.tripId));
    }
    
    // Leaderboard stats (can be a separate collection or computed on-the-fly)
    match /leaderboard/{entryId} {
      allow read: if isSignedIn() && isTripMember(resource.data.tripId);
      // No direct writes - should be updated by cloud functions
      allow write: if false;
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}